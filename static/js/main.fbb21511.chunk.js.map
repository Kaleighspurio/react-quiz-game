{"version":3,"sources":["components/Header.js","components/ScoreBox.js","utils/API.js","components/QuestionDiv.js","components/FilterForm.js","components/Main.js","App.js","index.js"],"names":["Header","className","id","ScoreBox","props","score","onClick","handlePlayAgain","axios","get","categoryId","QuestionDiv","i","apiResults","map","result","key","question","name","onChange","handleRadioChange","category","n","showAnswers","style","correctAnswers","userAnswers","color","displayAnswers","type","value","all_answers","length","handleQuizSubmit","displayButton","FilterForm","handleAllSubmit","handleChange","allCategories","handleCategorySubmit","Main","useState","question1","question2","question3","question4","question5","question6","question7","question8","question9","question10","question11","question12","question13","question14","question15","filterDisplay","displayScore","state","setState","useEffect","API","then","response","data","trivia_categories","decodeResults","results","decoded","forEach","object","allOptions","Base64","decode","incorrect_answers","correct_answer","sort","questionObject","push","grabCorrectAnswers","event","preventDefault","target","allAnswered","alert","checkAnswers","window","scrollTo","top","behavior","userAnswerArray","rawScore","userAnswer","console","log","calculateScore","percentCorrect","Math","round","location","reload","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbb21511.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nexport default function Header() {\n  return (\n    <section className=\"hero\">\n      <div className=\"hero-body\">\n        <div className=\"container\">\n          <h1 id=\"white\" className=\"title\">Trivia Quiz!</h1>\n          <h2 id=\"yellow\" className=\"subtitle\">\n            Test your knowledge of trivia! Select a category or answer questions\n            from all possible categories.\n          </h2>\n        </div>\n      </div>\n    </section>\n  );\n}\n","import React from 'react';\nimport './ScoreBox.css';\n\nexport default function ScoreBox(props) {\n\n    const displayScore = () => {\n        if (props.score === 0) {\n            return <span></span>\n        } else {\n        return <span>{props.score} %</span>\n        }\n    }\n    return (\n        <div className='tile is-child is-success'>\n            <p className='title is-4 my-4'>Your Score: {displayScore()}</p>\n            <button id=\"playagain\" className='button' onClick={props.handlePlayAgain}>Play Again?</button>\n        </div>\n    )\n}","import axios from 'axios';\n\nexport default {\n    getQuestionsAnyCategory: function() {\n        return axios.get('https://opentdb.com/api.php?amount=15&type=multiple&encode=base64');\n    },\n\n    getPossibleCategories: function() {\n        return axios.get('https://opentdb.com/api_category.php');\n    },\n\n    getQuestionsByCategory: function(categoryId) {\n        return axios.get(`https://opentdb.com/api.php?amount=15&type=multiple&category=${categoryId}&encode=base64`);\n    }\n}","import React from 'react';\nimport './QuestionDiv.css';\n\nexport default function QuestionDiv(props) {\n  // if there are questions, display the end of game button\n  const displayButton = () => {\n    if (props.apiResults.length > 1) {\n      return (\n        <button\n          type=\"submit\"\n          id=\"done-button\"\n          className=\"button mb-6 mt-3\"\n          onClick={props.handleQuizSubmit}\n        >\n          Done!\n        </button>\n      );\n    }\n  };\n\n  const displayAnswers = (n) => {\n    if (props.showAnswers) {\n      return (\n        <span\n          className=\"has-text-weight-bold\"\n          style={\n            props.correctAnswers[n - 1] === props.userAnswers[n - 1]\n              ? { color: '#0c7c59' }\n              : { color: '#800000' }\n          }\n        >\n          Correct Answer: {props.correctAnswers[n - 1]}\n        </span>\n      );\n    }\n  };\n\n  // these help give the questions and radios numbers\n  let i = 0;\n\n  return (\n    <div className=\"container\">\n      {props.apiResults.map((result) => (\n        <div\n          className=\"my-4 question-div\"\n          key={result.question}\n          name={result.question}\n          onChange={props.handleRadioChange}\n        >\n          <p className=\"my-2 left\">Category: {result.category}</p>\n          <p className=\"left question\">\n            {1 + i++}. {result.question}\n          </p>\n          <p>{displayAnswers(i)}</p>\n          <form className=\"form\">\n            <div className=\"control my-3 radio-div\">\n              <label>\n                <input\n                  className=\"mx-1\"\n                  type=\"radio\"\n                  name={'question' + i}\n                  value={result.all_answers[0]}\n                />\n                {result.all_answers[0]}\n              </label>\n              <br />\n              <label>\n                <input\n                  className=\"mx-1\"\n                  type=\"radio\"\n                  name={'question' + i}\n                  value={result.all_answers[1]}\n                />\n                {result.all_answers[1]}\n              </label>\n              <br />\n              <label>\n                <input\n                  className=\"mx-1\"\n                  type=\"radio\"\n                  name={'question' + i}\n                  value={result.all_answers[2]}\n                />\n                {result.all_answers[2]}\n              </label>\n              <br />\n              <label>\n                <input\n                  className=\"mx-1\"\n                  type=\"radio\"\n                  name={'question' + i}\n                  value={result.all_answers[3]}\n                />\n                {result.all_answers[3]}\n              </label>\n            </div>\n          </form>\n        </div>\n       ))}\n      {displayButton()}\n    </div>\n  );\n}\n","import React from 'react';\nimport './FilterForm.css';\n\nexport default function FilterForm(props) {\n    return (\n        <form className=\"my-6\">\n        <div className=\"is-grouped\">\n          <p className=\"control\">\n            <button\n            id='allbtn'\n              className=\"button is-fullwidth\"\n              type=\"submit\"\n              onClick={props.handleAllSubmit}\n            >\n              I Want Questions from All Categories!\n            </button>\n          </p>\n          <h2 className=\"my-4 control\">OR...</h2>\n          <div className=\"field is-grouped\">\n            <div className=\"control is-expanded\">\n              <div className=\"select is-fullwidth\">\n                <select onChange={props.handleChange} id='select'>\n                  {props.allCategories.map((category) => (\n                    <option id=\"options\" key={category.id} value={category.id}>\n                      {category.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            <p className=\"control\">\n              <button\n                id='searchbtn'\n                className=\"button is-info\"\n                type=\"submit\"\n                onClick={props.handleCategorySubmit}\n              >\n                Choose Category\n              </button>\n            </p>\n          </div>\n        </div>\n      </form>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport ScoreBox from './ScoreBox';\nimport API from '../utils/API';\nimport QuestionDiv from './QuestionDiv';\nimport { Base64 } from 'js-base64';\nimport FilterForm from './FilterForm';\n\nexport default function Main() {\n  // Lets have some state...\n  //   * apiResults: Where the decoded results (trivia questions and answers) are stored\n  // * categoryId: Where the selected category is stored, if the user wants trivia of a certain category\n  //  * allCategories: all category options possible, used in the select dropdown\n  //  * correctAnswers: all of the correct answers to the current questions\n  //  * question1-15: stores all of the answers that the user selected\n  //  * userAnswers: is used to display the correct answers after scoring\n  //  * score: stores the user's score after the quiz\n  //  * showAnswers: gets changed after the quiz is submitted and when changed to true, will display the correct answer for each quesiton.\n  const [state, setState] = useState({\n    apiResults: [],\n    categoryId: '9',\n    allCategories: [],\n    correctAnswers: [],\n    question1: '',\n    question2: '',\n    question3: '',\n    question4: '',\n    question5: '',\n    question6: '',\n    question7: '',\n    question8: '',\n    question9: '',\n    question10: '',\n    question11: '',\n    question12: '',\n    question13: '',\n    question14: '',\n    question15: '',\n    userAnswers: [],\n    score: 0,\n    showAnswers: false,\n    filterDisplay: true,\n    displayScore: false\n  });\n\n  // when the component loads, get all possible trivia categories to use in the select dropdown\n  useEffect(() => {\n    API.getPossibleCategories().then((response) => {\n      setState({ ...state, allCategories: response.data.trivia_categories });\n    });\n  }, []);\n\n  //   API response comes with base64 encoding, so the js-base64 package will decode it.  The grabCorrectAnswers function is also called to set the correctAnswers in the state.\n  const decodeResults = (results) => {\n    const decoded = [];\n    results.forEach((object) => {\n      const allOptions = [\n        Base64.decode(object.incorrect_answers[0]),\n        Base64.decode(object.incorrect_answers[1]),\n        Base64.decode(object.incorrect_answers[2]),\n        Base64.decode(object.correct_answer),\n      ];\n      // lets put all 4 answer options in alphabetical order and we will display them in alphabetically order so that it is random...\n      allOptions.sort();\n      const questionObject = {\n        category: Base64.decode(object.category),\n        question: Base64.decode(object.question),\n        correct_answer: Base64.decode(object.correct_answer),\n        all_answers: allOptions,\n      };\n      // push the object we created with the api results into an array\n      decoded.push(questionObject);\n    });\n    // this function will grab the correct answers and will set the state for the correctAnswers AND apiResults\n    grabCorrectAnswers(decoded);\n  };\n\n  //   If the user clicks the 'I Want All Categories' button, send request to the API for those quesitons. Then calls the function decodeResults which sets the state apiResults to the decoded results\n  const handleAllSubmit = (event) => {\n    event.preventDefault();\n    API.getQuestionsAnyCategory().then((response) => {\n      decodeResults(response.data.results);\n    });\n  };\n\n  //   When the select box is changed, set the state.categoryId to the id of the selected category\n  const handleChange = (event) => {\n    event.preventDefault();\n    setState({\n      ...state,\n      categoryId: event.target.value,\n    });\n  };\n\n  //   When a particular category is indicated, call the API and pass in the categoryId.  Then the results are decoded and the state.apiResults is set.\n  const handleCategorySubmit = (event) => {\n    event.preventDefault();\n    API.getQuestionsByCategory(state.categoryId).then((response) => {\n      decodeResults(response.data.results);\n    });\n  };\n\n  const grabCorrectAnswers = (results) => {\n    const correctAnswers = [];\n    results.forEach((result) => {\n      correctAnswers.push(result.correct_answer);\n    });\n    setState({\n      ...state,\n      apiResults: results,\n      correctAnswers: correctAnswers,\n      filterDisplay: false,\n    });\n  };\n\n  //   when the radio buttons are changed, the state is set according to which question\n  const handleRadioChange = (event) => {\n    const { name, value } = event.target;\n    setState({\n      ...state,\n      [name]: value,\n    });\n  };\n\n  const handleQuizSubmit = (event) => {\n    event.preventDefault();\n    allAnswered();\n  };\n\n  const allAnswered = () => {\n    //   check that all questions have been answered\n    if (\n      !state.question1 ||\n      !state.question2 ||\n      !state.question3 ||\n      !state.question4 ||\n      !state.question5 ||\n      !state.question6 ||\n      !state.question7 ||\n      !state.question8 ||\n      !state.question9 ||\n      !state.question10 ||\n      !state.question11 ||\n      !state.question12 ||\n      !state.question13 ||\n      !state.question14 ||\n      !state.question15\n    ) {\n      return alert('oops you forgot at least one question');\n    } else {\n      // if all questions answers, call the check answers function\n      checkAnswers();\n      //   And scroll back to the top of the page\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth',\n      });\n    }\n  };\n\n  const checkAnswers = () => {\n    const userAnswerArray = [\n      state.question1,\n      state.question2,\n      state.question3,\n      state.question4,\n      state.question5,\n      state.question6,\n      state.question7,\n      state.question8,\n      state.question9,\n      state.question10,\n      state.question11,\n      state.question12,\n      state.question13,\n      state.question14,\n      state.question15,\n    ];\n    //   check which answers are correct/incorrect\n    let rawScore = 0;\n    let i = 0;\n    userAnswerArray.forEach((userAnswer) => {\n      if (userAnswer === state.correctAnswers[i]) {\n        rawScore++;\n      }\n      i++;\n    });\n    console.log(rawScore, 'this is the rawscore');\n    calculateScore(rawScore, userAnswerArray);\n  };\n\n  // calculate the score to a percentage\n  const calculateScore = (score, userAnswerArray) => {\n    const percentCorrect = Math.round((score / 15) * 100);\n    // set the state.showAnswers to be true, so then the answers will be displayed.\n    setState({\n      ...state,\n      score: percentCorrect,\n      showAnswers: true,\n      userAnswers: userAnswerArray,\n      displayScore: true\n    });\n  };\n\n  const handlePlayAgain = () => {\n    window.location.reload(false);\n  }\n\n  // handles conditional rendering for the filterform and quiz questiondiv\n  const displayFilter = () => {\n    if (state.filterDisplay === true) {\n      return (\n        <FilterForm\n        handleAllSubmit={handleAllSubmit}\n        handleChange={handleChange}\n        allCategories={state.allCategories}\n        handleCategorySubmit={handleCategorySubmit}\n        filterDisplay={state.filterDisplay}\n      />\n      )\n    } else {\n      return (\n        <QuestionDiv\n        apiResults={state.apiResults}\n        handleRadioChange={handleRadioChange}\n        handleQuizSubmit={handleQuizSubmit}\n        showAnswers={state.showAnswers}\n        correctAnswers={state.correctAnswers}\n        userAnswers={state.userAnswers}\n      />\n      )\n    }\n  };\n\n  // handles conditional rendering of the scorebox\n  const displayScore = () => {\n    if (state.displayScore === true ) {\n      return <ScoreBox score={state.score} handlePlayAgain={handlePlayAgain} />\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      {displayScore()}\n      {displayFilter()}\n    </div>\n  );\n}\n","import React from 'react';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Header />\n        <Main />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bulma/css/bulma.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}